// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tobslob/video-manager/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/tobslob/video-manager/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreatVideoWithMetadataTx mocks base method.
func (m *MockStore) CreatVideoWithMetadataTx(arg0 context.Context, arg1 db.CreateVideoWithMetadata) (db.CreatVideoWithMetadataTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatVideoWithMetadataTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreatVideoWithMetadataTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatVideoWithMetadataTx indicates an expected call of CreatVideoWithMetadataTx.
func (mr *MockStoreMockRecorder) CreatVideoWithMetadataTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatVideoWithMetadataTx", reflect.TypeOf((*MockStore)(nil).CreatVideoWithMetadataTx), arg0, arg1)
}

// CreateAnnotation mocks base method.
func (m *MockStore) CreateAnnotation(arg0 context.Context, arg1 db.CreateAnnotationParams) (db.Annotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnnotation", arg0, arg1)
	ret0, _ := ret[0].(db.Annotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnnotation indicates an expected call of CreateAnnotation.
func (mr *MockStoreMockRecorder) CreateAnnotation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnnotation", reflect.TypeOf((*MockStore)(nil).CreateAnnotation), arg0, arg1)
}

// CreateMetadata mocks base method.
func (m *MockStore) CreateMetadata(arg0 context.Context, arg1 db.CreateMetadataParams) (db.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetadata", arg0, arg1)
	ret0, _ := ret[0].(db.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetadata indicates an expected call of CreateMetadata.
func (mr *MockStoreMockRecorder) CreateMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetadata", reflect.TypeOf((*MockStore)(nil).CreateMetadata), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateVideo mocks base method.
func (m *MockStore) CreateVideo(arg0 context.Context, arg1 db.CreateVideoParams) (db.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVideo", arg0, arg1)
	ret0, _ := ret[0].(db.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVideo indicates an expected call of CreateVideo.
func (mr *MockStoreMockRecorder) CreateVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVideo", reflect.TypeOf((*MockStore)(nil).CreateVideo), arg0, arg1)
}

// DeleteAnnotation mocks base method.
func (m *MockStore) DeleteAnnotation(arg0 context.Context, arg1 db.DeleteAnnotationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnnotation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnnotation indicates an expected call of DeleteAnnotation.
func (mr *MockStoreMockRecorder) DeleteAnnotation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnotation", reflect.TypeOf((*MockStore)(nil).DeleteAnnotation), arg0, arg1)
}

// DeleteVideo mocks base method.
func (m *MockStore) DeleteVideo(arg0 context.Context, arg1 db.DeleteVideoParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVideo indicates an expected call of DeleteVideo.
func (mr *MockStoreMockRecorder) DeleteVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVideo", reflect.TypeOf((*MockStore)(nil).DeleteVideo), arg0, arg1)
}

// GetAVideoAndMetadata mocks base method.
func (m *MockStore) GetAVideoAndMetadata(arg0 context.Context, arg1 db.GetAVideoAndMetadataParams) (db.GetAVideoAndMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAVideoAndMetadata", arg0, arg1)
	ret0, _ := ret[0].(db.GetAVideoAndMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAVideoAndMetadata indicates an expected call of GetAVideoAndMetadata.
func (mr *MockStoreMockRecorder) GetAVideoAndMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAVideoAndMetadata", reflect.TypeOf((*MockStore)(nil).GetAVideoAndMetadata), arg0, arg1)
}

// GetAnnotation mocks base method.
func (m *MockStore) GetAnnotation(arg0 context.Context, arg1 db.GetAnnotationParams) (db.Annotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotation", arg0, arg1)
	ret0, _ := ret[0].(db.Annotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotation indicates an expected call of GetAnnotation.
func (mr *MockStoreMockRecorder) GetAnnotation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotation", reflect.TypeOf((*MockStore)(nil).GetAnnotation), arg0, arg1)
}

// GetMetadata mocks base method.
func (m *MockStore) GetMetadata(arg0 context.Context, arg1 uuid.UUID) (db.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", arg0, arg1)
	ret0, _ := ret[0].(db.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockStoreMockRecorder) GetMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockStore)(nil).GetMetadata), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetVideo mocks base method.
func (m *MockStore) GetVideo(arg0 context.Context, arg1 db.GetVideoParams) (db.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideo", arg0, arg1)
	ret0, _ := ret[0].(db.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideo indicates an expected call of GetVideo.
func (mr *MockStoreMockRecorder) GetVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideo", reflect.TypeOf((*MockStore)(nil).GetVideo), arg0, arg1)
}

// ListAnnotations mocks base method.
func (m *MockStore) ListAnnotations(arg0 context.Context, arg1 db.ListAnnotationsParams) ([]db.Annotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnnotations", arg0, arg1)
	ret0, _ := ret[0].([]db.Annotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnnotations indicates an expected call of ListAnnotations.
func (mr *MockStoreMockRecorder) ListAnnotations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotations", reflect.TypeOf((*MockStore)(nil).ListAnnotations), arg0, arg1)
}

// ListVideos mocks base method.
func (m *MockStore) ListVideos(arg0 context.Context, arg1 db.ListVideosParams) ([]db.ListVideosRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.ListVideosRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVideos indicates an expected call of ListVideos.
func (mr *MockStoreMockRecorder) ListVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVideos", reflect.TypeOf((*MockStore)(nil).ListVideos), arg0, arg1)
}

// UpdateAnnotation mocks base method.
func (m *MockStore) UpdateAnnotation(arg0 context.Context, arg1 db.UpdateAnnotationParams) (db.Annotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnnotation", arg0, arg1)
	ret0, _ := ret[0].(db.Annotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnnotation indicates an expected call of UpdateAnnotation.
func (mr *MockStoreMockRecorder) UpdateAnnotation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnotation", reflect.TypeOf((*MockStore)(nil).UpdateAnnotation), arg0, arg1)
}

// UpdateMetadata mocks base method.
func (m *MockStore) UpdateMetadata(arg0 context.Context, arg1 db.UpdateMetadataParams) (db.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetadata", arg0, arg1)
	ret0, _ := ret[0].(db.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetadata indicates an expected call of UpdateMetadata.
func (mr *MockStoreMockRecorder) UpdateMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetadata", reflect.TypeOf((*MockStore)(nil).UpdateMetadata), arg0, arg1)
}

// UpdateVideo mocks base method.
func (m *MockStore) UpdateVideo(arg0 context.Context, arg1 db.UpdateVideoParams) (db.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideo", arg0, arg1)
	ret0, _ := ret[0].(db.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVideo indicates an expected call of UpdateVideo.
func (mr *MockStoreMockRecorder) UpdateVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideo", reflect.TypeOf((*MockStore)(nil).UpdateVideo), arg0, arg1)
}

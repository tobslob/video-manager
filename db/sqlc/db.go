// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAnnotationStmt, err = db.PrepareContext(ctx, createAnnotation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAnnotation: %w", err)
	}
	if q.createMetadataStmt, err = db.PrepareContext(ctx, createMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMetadata: %w", err)
	}
	if q.createSessionStmt, err = db.PrepareContext(ctx, createSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSession: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createVideoStmt, err = db.PrepareContext(ctx, createVideo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateVideo: %w", err)
	}
	if q.deleteAnnotationStmt, err = db.PrepareContext(ctx, deleteAnnotation); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAnnotation: %w", err)
	}
	if q.deleteVideoStmt, err = db.PrepareContext(ctx, deleteVideo); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteVideo: %w", err)
	}
	if q.getAVideoAndMetadataStmt, err = db.PrepareContext(ctx, getAVideoAndMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query GetAVideoAndMetadata: %w", err)
	}
	if q.getAnnotationStmt, err = db.PrepareContext(ctx, getAnnotation); err != nil {
		return nil, fmt.Errorf("error preparing query GetAnnotation: %w", err)
	}
	if q.getMetadataStmt, err = db.PrepareContext(ctx, getMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query GetMetadata: %w", err)
	}
	if q.getSessionStmt, err = db.PrepareContext(ctx, getSession); err != nil {
		return nil, fmt.Errorf("error preparing query GetSession: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getVideoStmt, err = db.PrepareContext(ctx, getVideo); err != nil {
		return nil, fmt.Errorf("error preparing query GetVideo: %w", err)
	}
	if q.listAnnotationsStmt, err = db.PrepareContext(ctx, listAnnotations); err != nil {
		return nil, fmt.Errorf("error preparing query ListAnnotations: %w", err)
	}
	if q.listVideosStmt, err = db.PrepareContext(ctx, listVideos); err != nil {
		return nil, fmt.Errorf("error preparing query ListVideos: %w", err)
	}
	if q.updateAnnotationStmt, err = db.PrepareContext(ctx, updateAnnotation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAnnotation: %w", err)
	}
	if q.updateMetadataStmt, err = db.PrepareContext(ctx, updateMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMetadata: %w", err)
	}
	if q.updateVideoStmt, err = db.PrepareContext(ctx, updateVideo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateVideo: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAnnotationStmt != nil {
		if cerr := q.createAnnotationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAnnotationStmt: %w", cerr)
		}
	}
	if q.createMetadataStmt != nil {
		if cerr := q.createMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMetadataStmt: %w", cerr)
		}
	}
	if q.createSessionStmt != nil {
		if cerr := q.createSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSessionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createVideoStmt != nil {
		if cerr := q.createVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createVideoStmt: %w", cerr)
		}
	}
	if q.deleteAnnotationStmt != nil {
		if cerr := q.deleteAnnotationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAnnotationStmt: %w", cerr)
		}
	}
	if q.deleteVideoStmt != nil {
		if cerr := q.deleteVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteVideoStmt: %w", cerr)
		}
	}
	if q.getAVideoAndMetadataStmt != nil {
		if cerr := q.getAVideoAndMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAVideoAndMetadataStmt: %w", cerr)
		}
	}
	if q.getAnnotationStmt != nil {
		if cerr := q.getAnnotationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAnnotationStmt: %w", cerr)
		}
	}
	if q.getMetadataStmt != nil {
		if cerr := q.getMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMetadataStmt: %w", cerr)
		}
	}
	if q.getSessionStmt != nil {
		if cerr := q.getSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getVideoStmt != nil {
		if cerr := q.getVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVideoStmt: %w", cerr)
		}
	}
	if q.listAnnotationsStmt != nil {
		if cerr := q.listAnnotationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAnnotationsStmt: %w", cerr)
		}
	}
	if q.listVideosStmt != nil {
		if cerr := q.listVideosStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listVideosStmt: %w", cerr)
		}
	}
	if q.updateAnnotationStmt != nil {
		if cerr := q.updateAnnotationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAnnotationStmt: %w", cerr)
		}
	}
	if q.updateMetadataStmt != nil {
		if cerr := q.updateMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMetadataStmt: %w", cerr)
		}
	}
	if q.updateVideoStmt != nil {
		if cerr := q.updateVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateVideoStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createAnnotationStmt     *sql.Stmt
	createMetadataStmt       *sql.Stmt
	createSessionStmt        *sql.Stmt
	createUserStmt           *sql.Stmt
	createVideoStmt          *sql.Stmt
	deleteAnnotationStmt     *sql.Stmt
	deleteVideoStmt          *sql.Stmt
	getAVideoAndMetadataStmt *sql.Stmt
	getAnnotationStmt        *sql.Stmt
	getMetadataStmt          *sql.Stmt
	getSessionStmt           *sql.Stmt
	getUserStmt              *sql.Stmt
	getVideoStmt             *sql.Stmt
	listAnnotationsStmt      *sql.Stmt
	listVideosStmt           *sql.Stmt
	updateAnnotationStmt     *sql.Stmt
	updateMetadataStmt       *sql.Stmt
	updateVideoStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createAnnotationStmt:     q.createAnnotationStmt,
		createMetadataStmt:       q.createMetadataStmt,
		createSessionStmt:        q.createSessionStmt,
		createUserStmt:           q.createUserStmt,
		createVideoStmt:          q.createVideoStmt,
		deleteAnnotationStmt:     q.deleteAnnotationStmt,
		deleteVideoStmt:          q.deleteVideoStmt,
		getAVideoAndMetadataStmt: q.getAVideoAndMetadataStmt,
		getAnnotationStmt:        q.getAnnotationStmt,
		getMetadataStmt:          q.getMetadataStmt,
		getSessionStmt:           q.getSessionStmt,
		getUserStmt:              q.getUserStmt,
		getVideoStmt:             q.getVideoStmt,
		listAnnotationsStmt:      q.listAnnotationsStmt,
		listVideosStmt:           q.listVideosStmt,
		updateAnnotationStmt:     q.updateAnnotationStmt,
		updateMetadataStmt:       q.updateMetadataStmt,
		updateVideoStmt:          q.updateVideoStmt,
	}
}

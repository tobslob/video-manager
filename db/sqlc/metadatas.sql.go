// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: metadatas.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createMetadata = `-- name: CreateMetadata :one
INSERT INTO metadatas (
  id,
  video_id,
  width,
  height,
  file_type,
  file_size,
  last_modify,
  accessed_date,
  resolutions,
  keywords
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, video_id, width, height, file_type, file_size, last_modify, accessed_date, resolutions, keywords, created_at, updated_at
`

type CreateMetadataParams struct {
	ID           uuid.UUID      `json:"id"`
	VideoID      uuid.UUID      `json:"video_id"`
	Width        int32          `json:"width"`
	Height       int32          `json:"height"`
	FileType     string         `json:"file_type"`
	FileSize     sql.NullString `json:"file_size"`
	LastModify   time.Time      `json:"last_modify"`
	AccessedDate time.Time      `json:"accessed_date"`
	Resolutions  int32          `json:"resolutions"`
	Keywords     sql.NullString `json:"keywords"`
}

func (q *Queries) CreateMetadata(ctx context.Context, arg CreateMetadataParams) (Metadata, error) {
	row := q.queryRow(ctx, q.createMetadataStmt, createMetadata,
		arg.ID,
		arg.VideoID,
		arg.Width,
		arg.Height,
		arg.FileType,
		arg.FileSize,
		arg.LastModify,
		arg.AccessedDate,
		arg.Resolutions,
		arg.Keywords,
	)
	var i Metadata
	err := row.Scan(
		&i.ID,
		&i.VideoID,
		&i.Width,
		&i.Height,
		&i.FileType,
		&i.FileSize,
		&i.LastModify,
		&i.AccessedDate,
		&i.Resolutions,
		&i.Keywords,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMetadata = `-- name: DeleteMetadata :exec
DELETE FROM metadatas WHERE video_id = $1
`

func (q *Queries) DeleteMetadata(ctx context.Context, videoID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteMetadataStmt, deleteMetadata, videoID)
	return err
}

const getMetadata = `-- name: GetMetadata :one
SELECT id, video_id, width, height, file_type, file_size, last_modify, accessed_date, resolutions, keywords, created_at, updated_at FROM metadatas
WHERE video_id = $1 LIMIT 1
`

func (q *Queries) GetMetadata(ctx context.Context, videoID uuid.UUID) (Metadata, error) {
	row := q.queryRow(ctx, q.getMetadataStmt, getMetadata, videoID)
	var i Metadata
	err := row.Scan(
		&i.ID,
		&i.VideoID,
		&i.Width,
		&i.Height,
		&i.FileType,
		&i.FileSize,
		&i.LastModify,
		&i.AccessedDate,
		&i.Resolutions,
		&i.Keywords,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMetadata = `-- name: UpdateMetadata :one
UPDATE metadatas
SET width = $2, height = $3, keywords = $4
WHERE id = $1
RETURNING id, video_id, width, height, file_type, file_size, last_modify, accessed_date, resolutions, keywords, created_at, updated_at
`

type UpdateMetadataParams struct {
	ID       uuid.UUID      `json:"id"`
	Width    int32          `json:"width"`
	Height   int32          `json:"height"`
	Keywords sql.NullString `json:"keywords"`
}

func (q *Queries) UpdateMetadata(ctx context.Context, arg UpdateMetadataParams) (Metadata, error) {
	row := q.queryRow(ctx, q.updateMetadataStmt, updateMetadata,
		arg.ID,
		arg.Width,
		arg.Height,
		arg.Keywords,
	)
	var i Metadata
	err := row.Scan(
		&i.ID,
		&i.VideoID,
		&i.Width,
		&i.Height,
		&i.FileType,
		&i.FileSize,
		&i.LastModify,
		&i.AccessedDate,
		&i.Resolutions,
		&i.Keywords,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
